---
# run with:
# cd /opt/meza/ansible
# sudo -u meza-ansible ansible-playbook site.yml


- hosts: all
  become: yes
  roles:
    - set-vars
    - base
    # FIXME: add "security" module here

# FIXME: why is controller init on all app servers?
- hosts: app-servers
  become: yes
  roles:
    - set-vars
    - init-controller-config

- hosts: load-balancers
  become: yes
  tags: load-balancer
  roles:
    - set-vars
    - haproxy

- hosts: app-servers
  become: yes
  roles:
    - set-vars
    - role: firewalld
      # firewalld_service: http
      firewalld_port: 8080
      firewalld_protocol: tcp
      firewalld_servers: "{{ groups['load-balancers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - role: firewalld
      firewalld_port: 8080
      firewalld_protocol: tcp
      firewalld_servers: "{{ groups['parsoid-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - base-extras
    - imagemagick
    - apache-php
    - composer

- hosts: memcached-servers
  become: yes
  roles:
    - set-vars
    - role: firewalld
      firewalld_port: 11211
      firewalld_protocol: tcp
      firewalld_servers: "{{ groups['app-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - memcached

- hosts: db-master
  become: yes
  tags: database
  roles:
    - set-vars
    - role: firewalld
      firewalld_service: mysql
      firewalld_servers: "{{ groups['app-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - role: firewalld
      firewalld_service: mysql
      firewalld_servers: "{{ groups['db-slaves'] }}"
      firewalld_zone: public
    - role: database
      # Get the one and only server that should be in the db-master group and set
      # it's IP address as replication master IP. Note that this can be left blank
      # or not included at all if no replication should be performed.
      # FIXME: add condition for "if slaves.length > 0, set replication master, else leave blank"?
      mysql_replication_master: "{{ groups['db-master'][0] }}"
      mysql_replication_role: master


- hosts: db-slaves
  become: yes
  tags: database
  roles:
    - set-vars
    - role: firewalld
      firewalld_service: mysql
      firewalld_servers: "{{ groups['app-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - role: database
      # Get the one and only server that should be in the db-master group and set
      # it's IP address as replication master IP. Note that this can be left blank
      # or not included at all if no replication should be performed.
      mysql_replication_master: "{{ groups['db-master'][0] }}"
      mysql_replication_role: slave


- hosts: parsoid-servers
  become: yes
  tags: parsoid
  roles:
    - set-vars
    # Allow app servers to get to parsoid server(s) on port 8000
    - role: firewalld
      firewalld_port: 8000
      firewalld_protocol: tcp
      firewalld_servers: "{{ groups['app-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - nodejs
    - role: parsoid
      nodejs_install_npm_user: "nodejs"
      nodejs_version: "0.12" #FIXME: pretty sure this does nothing now
      nodejs_npm_global_packages: []
        # - name: example-global-package
        # - name: jslint
        #   version: 0.9.3
        # # latest version
        # - name: node-sass


- hosts: elastic-servers
  become: yes
  tags: elasticsearch
  roles:
    - set-vars
    - role: firewalld
      firewalld_port: 9200
      firewalld_protocol: tcp
      firewalld_servers: "{{ groups['app-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - role: firewalld
      firewalld_port: 9300
      firewalld_protocol: tcp
      firewalld_servers: "{{ groups['app-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - role: firewalld
      firewalld_port: 9200
      firewalld_protocol: tcp
      firewalld_servers: "{{ groups['elastic-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - role: firewalld
      firewalld_port: 9300
      firewalld_protocol: tcp
      firewalld_servers: "{{ groups['elastic-servers'] }}"
      firewalld_zone: "{{m_private_networking_zone|default('public')}}"
    - elasticsearch

# Note: this is app-servers again, but must be after everything else is setup
- hosts: app-servers
  become: yes
  tags: mediawiki
  roles:
    - set-vars
    - composer
    - mediawiki
