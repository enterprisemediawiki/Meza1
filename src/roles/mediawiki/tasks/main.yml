---
#
# SYNC CONFIGS
#
- name: Sync configuration between controller and app servers
  include_role:
    name: sync-configs

#
# ENSURE APP SERVERS CAN GIT-CLONE OVER SSH
#
- name: Ensure user meza-ansible .ssh dir configured
  file:
    path: "{{ m_home }}/meza-ansible/.ssh"
    owner: meza-ansible
    group: wheel
    mode: 0700
    state: directory

- name: Copy meza-ansible keys to app servers
  copy:
    src: "{{ m_home }}/meza-ansible/.ssh/{{ item.name }}"
    dest: "{{ m_home }}/meza-ansible/.ssh/{{ item.name }}"
    owner: meza-ansible
    group: wheel
    mode: "{{ item.mode }}"
  with_items:
    - name: id_rsa
      mode: "0600"
    - name: id_rsa.pub
      mode: "0644"

- name: Copy meza-ansible known_hosts to app_servers
  copy:
    src: "{{ m_home }}/meza-ansible/.ssh/{{ item.name }}"
    dest: "{{ m_home }}/meza-ansible/.ssh/{{ item.name }}"
    owner: meza-ansible
    group: wheel
    mode: "{{ item.mode }}"
  failed_when: False
  with_items:
    - name: known_hosts
      mode: "0600"

#
# MEDIAWIKI CORE
#
- name: Ensure MediaWiki core ignores submodules
  blockinfile:
    path: "{{ m_mediawiki }}/.git/config"
    block: |
      [diff]
          ignoreSubmodules = all
  failed_when: False
  tags:
    - mediawiki-core
- name: Ensure MediaWiki core owned by meza-ansible
  file:
    path: "{{ m_mediawiki }}"
    mode: "{{ m_htdocs_mode }}"
    owner: "{{ m_htdocs_owner }}"
    group: "{{ m_htdocs_group }}"
    state: directory
    recurse: yes
  tags:
    - mediawiki-core
- name: Ensure proper MediaWiki git version installed
  become: yes
  become_user: "meza-ansible"
  # Ref #1149 for TMPDIR environment var
  environment:
    TMPDIR: "{{ m_tmp }}"
  git:
    repo: https://github.com/wikimedia/mediawiki.git
    dest: "{{ m_mediawiki }}"
    version: "{{ mediawiki_version }}"
    refspec: "{{ item.refspec | default('') }}"
    track_submodules: no
    recursive: no
    umask: "0002"

  # this sucks to have to do this but I'm repeatedly getting submodule errors
  # so it's this or stop using git (which would also mean changing how
  # extensions/skins/vendor is stored so it didn't wipe them out each time)
  failed_when: False

  tags:
    - latest
    - mediawiki-core
- name: Ensure MediaWiki core ignores submodules
  blockinfile:
    path: "{{ m_mediawiki }}/.git/config"
    block: |
      [diff]
          ignoreSubmodules = all
  tags:
    - mediawiki-core

#
# EXTENSIONS AND SKINS
#
- name: Set variable holding list of core skins
  include_vars:
    file: "{{ m_config_core }}/MezaCoreSkins.yml"
    name: meza_core_skins
  tags:
    - skins

- name: Set variable holding list of local skins
  include_vars:
    file: "{{ m_local_public }}/MezaLocalSkins.yml"
    name: meza_local_skins
  tags:
    - skins

- name: Set variable holding list of core extensions
  include_vars:
    file: "{{ m_config_core }}/MezaCoreExtensions.yml"
    name: meza_core_extensions
  tags:
    - always

- name: Ensure core meza extensions installed (non-Composer)
  become: yes
  become_user: "meza-ansible"
  # Ref #1149 for TMPDIR environment var
  environment:
    TMPDIR: "{{ m_tmp }}"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ m_mediawiki }}/extensions/{{ item.name }}"
    version: "{{ item.version }}"
    refspec: "{{ item.refspec | default('') }}"
    umask: "0002"
  with_items: "{{ meza_core_extensions.list }}"
  when: meza_core_extensions.list[0] is defined and item.repo is defined
  tags:
    - extensions
    - git-extensions
    - git-core-extensions
    - latest

- name: Set variable holding list of local extensions
  include_vars:
    file: "{{ m_local_public }}/MezaLocalExtensions.yml"
    name: meza_local_extensions
  tags:
    - always

- name: Ensure core meza skins installed (non-Composer)
  # Ref #1149 for TMPDIR environment var
  environment:
    TMPDIR: "{{ m_tmp }}"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ m_mediawiki }}/skins/{{ item.name }}"
    version: "{{ item.version }}"
    refspec: "{{ item.refspec | default('') }}"
  with_items: "{{ meza_core_skins.list }}"
  when: meza_core_skins.list[0] is defined and item.repo is defined
  tags:
    - extensions
    - skins
    - core-skins

- name: Ensure local meza extensions installed (non-Composer)
  become: yes
  become_user: "meza-ansible"
  # Ref #1149 for TMPDIR environment var
  environment:
    TMPDIR: "{{ m_tmp }}"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ m_mediawiki }}/extensions/{{ item.name }}"
    version: "{{ item.version }}"
    refspec: "{{ item.refspec | default('') }}"
    umask: "0002"
    key_file: "{{ item.key_file | default(None) }}"
  with_items: "{{ meza_local_extensions.list }}"
  when: meza_local_extensions.list[0] is defined and item.repo is defined
  tags:
    - extensions
    - git-extensions
    - git-local-extensions
    - latest

- name: Ensure local meza skins installed (non-Composer)
  # Ref #1149 for TMPDIR environment var
  environment:
    TMPDIR: "{{ m_tmp }}"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ m_mediawiki }}/skins/{{ item.name }}"
    version: "{{ item.version }}"
    refspec: "{{ item.refspec | default('') }}"
  with_items: "{{ meza_local_skins.list }}"
  when: meza_local_skins.list[0] is defined and item.repo is defined
  tags:
    - skins
    - local-skins

# File holding extension loading and config for core and local extensions
# as well as core and local skins
- name: Ensure Extensions.php in place
  template:
    src: Extensions.php.j2
    dest: "{{ m_deploy }}/Extensions.php"
    mode: "{{ m_htdocs_mode }}"
    owner: "{{ m_htdocs_owner }}"
    group: "{{ m_htdocs_group }}"

# Adds extensions with composer param from MezaCoreExtensions.yml,
# MezaLocalExtensions.yml, MezaCoreSkins.yml, and MezaLocalSkins.yml
- name: Ensure composer.local.json in place to load composer-based extensions
  template:
    src: composer.local.json.j2
    dest: "{{ m_mediawiki }}/composer.local.json"
    mode: "{{ m_htdocs_mode }}"
    owner: "{{ m_htdocs_owner }}"
    group: "{{ m_htdocs_group }}"

- name: Run composer install on MediaWiki for dependencies
  become: yes
  become_user: "meza-ansible"
  composer:
    command: install
    working_dir: "{{ m_mediawiki }}"
    no_dev: yes
  tags:
    - composer-extensions
    - latest
    - skins

# install doesn't appear to do extensions
- name: Run composer update on MediaWiki for extensions
  become: yes
  become_user: "meza-ansible"
  composer:
    command: update
    working_dir: "{{ m_mediawiki }}"
    no_dev: yes
  tags:
    - extensions
    - composer-extensions
    - latest
    - skins

- name: Ensure Git submodule requirements met for core meza extensions
  become: yes
  become_user: "meza-ansible"
  shell: |
    cd "{{ m_mediawiki }}/extensions/{{ item.name }}"
    git submodule update --init
  with_items: "{{ meza_core_extensions.list }}"
  when: meza_core_extensions.list[0] is defined and item.git_submodules is defined and item.git_submodules == True
  tags:
    - extensions
    - git-submodules
    - latest

- name: Ensure Git submodule requirements met for local meza extensions
  become: yes
  become_user: "meza-ansible"
  shell: |
    cd "{{ m_mediawiki }}/extensions/{{ item.name }}"
    git submodule update --init
  with_items: "{{ meza_local_extensions.list }}"
  when: meza_local_extensions.list[0] is defined and item.git_submodules is defined and item.git_submodules == True
  tags:
    - extensions
    - git-submodules
    - latest

# Are there skins that have submodules?
- name: Ensure Git submodule requirements met for core meza skins
  shell: |
    cd "{{ m_mediawiki }}/skins/{{ item.name }}"
    git submodule update --init
  with_items: "{{ meza_core_skins.list }}"
  when: meza_core_skins.list[0] is defined and item.git_submodules is defined and item.git_submodules == True
  tags:
    - extensions
    - git-submodules
    - skins
    - latest

- name: Ensure Git submodule requirements met for local meza skins
  shell: |
    cd "{{ m_mediawiki }}/skins/{{ item.name }}"
    git submodule update --init
  with_items: "{{ meza_local_skins.list }}"
  when: meza_local_skins.list[0] is defined and item.git_submodules is defined and item.git_submodules == True
  tags:
    - extensions
    - git-submodules
    - skins
    - local-skins
    - latest

#
# LocalSettings.php
#
- name: Ensure LocalSettings.php in place
  template:
    src: LocalSettings.php.j2
    dest: "{{ m_mediawiki }}/LocalSettings.php"
    mode: "{{ m_htdocs_mode }}"
    owner: "{{ m_htdocs_owner }}"
    group: "{{ m_htdocs_group }}"

- name: Ensure MediaWiki still properly owned
  file:
    path: "{{ m_mediawiki }}"
    mode: "{{ m_htdocs_mode }}"
    owner: "{{ m_htdocs_owner }}"
    group: "{{ m_htdocs_group }}"
    state: directory
    recurse: yes
  tags:
    - mediawiki-core
    - file-perms

#
# LANDING PAGE
#
- name: Ensure WikiBlender installed
  # Ref #1149 for TMPDIR environment var
  environment:
    TMPDIR: "{{ m_tmp }}"
  git:
    repo: https://github.com/jamesmontalvo3/WikiBlender.git
    dest: "{{ m_htdocs }}/WikiBlender"
    version: "master"
    umask: "0002"

- name: Ensure BlenderSettings.php in place
  template:
    src: BlenderSettings.php.j2
    dest: "{{ m_htdocs }}/WikiBlender/BlenderSettings.php"
    mode: "{{ m_htdocs_mode }}"
    owner: "{{ m_htdocs_owner }}"
    group: "{{ m_htdocs_group }}"

- name: Ensure WikiBlender properly owned
  file:
    path: "{{ m_htdocs }}/WikiBlender"
    mode: "{{ m_htdocs_mode }}"
    owner: "{{ m_htdocs_owner }}"
    group: "{{ m_htdocs_group }}"
    state: directory
    recurse: yes

#
# Authentication roles
#
- name: Include SAML role if SAML configured
  include_role:
    name: saml
  when: saml_public is defined

#
# Cache (at this time) for localization caching. Also can be used for caching
# page contents, but this isn't as necessary for enterprise cases where
# generally users are always logged in.
#
- name: Ensure localization cache root directory exists (each wiki with sub-directory)
  file:
    state: directory
    path: "{{ m_cache_directory }}"
    owner: "{{ m_cache_directory_owner }}"
    group: "{{ m_cache_directory_group }}"
    mode: "{{ m_cache_directory_mode }}"

- name: "Ensure root uploads dir configured"
  file:
    path: "{{ m_uploads_dir }}"
    state: directory
    mode: "{{ m_uploads_dir_mode }}"
    owner: "{{ m_uploads_dir_owner }}"
    group: "{{ m_uploads_dir_group }}"

#
# DEMO WIKI (if needed)
#
# 1. Check if wikis exist
# 2. Create Demo Wiki if they don't
# 3. FIXME #820: create-wiki re-sync configs? Explicit re-sync not req'd?
#
- name: Check if any wikis exist
  find:
    paths: "{{ m_local_public }}/wikis"
    file_type: directory
  delegate_to: localhost
  register: initial_wikis_dirs_check
  run_once: true
  when: docker_skip_tasks is not defined or not docker_skip_tasks

- name: Add Demo Wiki to config if no wikis exist
  include_role:
    name: configure-wiki
  vars:
    wiki_id: demo
    wiki_name: Demo Wiki
  when:
    - (docker_skip_tasks is not defined or not docker_skip_tasks)
    - initial_wikis_dirs_check.files|length == 0

- name: Re-sync configuration between controller and app servers if Demo just configured
  include_role:
    name: sync-configs
  when:
    - (docker_skip_tasks is not defined or not docker_skip_tasks)
    - initial_wikis_dirs_check.files|length == 0

#
# VERIFY WIKIS
#
- name: Get individual wikis dirs from localhost
  find:
    paths: "{{ m_local_public }}/wikis/"
    file_type: directory
  register: wikis_dirs
  delegate_to: localhost
  run_once: yes

- name: Set fact - list of wikis
  set_fact:
    list_of_wikis: "{{ wikis_dirs.files | map(attribute='path') | map('basename') | list }}"

# Sort list of wikis so primary wiki is first. Need to have primary wiki's
# `user` table in place before other wikis are imported, otherwise will get
# errors when running update.php and such
- name: Set fact - list of wikis ordered with primary wiki first (if primary_wiki_id set)
  set_fact:
    list_of_wikis: "['{{ primary_wiki_id }}'] + {{ list_of_wikis | difference([primary_wiki_id]) }}"
  when: primary_wiki_id is defined

- debug: { var: list_of_wikis }

- name: Set fact - initiate empty list of wikis to rebuild search data
  set_fact:
    wikis_to_rebuild_data: []


# Prior to running verify-wiki, which will create an {{m_htdocs}}/wikis/{{wiki_id}}/config
# symlink to {{m_deploy}}/something, nuke the entirety of {{m_htdocs}}/wikis. All it holds is
# symlinks anyway, so no data will be lost. Running verify-wiki for each wiki will regenerate
# these symlinks for all valid wikis. These two tasks are tagged "verify-wiki" such that if
# `--skip-tags verify-wiki` is run, it doesn't nuke this directory then NOT recreate due to
# verify-wiki not being run.
#
# Without these tasks, old wikis that have been deleted from config will show up in
# the wiki landing page. Nuking this directory and recreating it clears them out.
- name: Delete content & directory to remove any wikis deleted from config
  file:
    path: "{{ m_htdocs }}/wikis"
    state: absent
  tags:
    - verify-wiki
- name: Recreate {{ m_htdocs }}/wikis directory
  file:
    path: "{{ m_htdocs }}/wikis"
    state: directory
    owner: "{{ user_apache }}"
    group: "{{ group_apache }}"
    mode: 0755
  tags:
    - verify-wiki

# Check that all wikis in config are present on app and DB servers
- name: Ensure defined wikis exist
  include_role:
    name: verify-wiki
  vars:
    wiki_id: "{{ item }}"
  # with initial wikis list of file info objects:
  #   filter 1: reduce list items to just the path
  #   filter 2: then reduce to just the last part of the path
  #   filter 3: convert map object back to an Ansible-friendly list
  with_items: "{{ list_of_wikis }}"
  tags:
    - verify-wiki
  when: docker_skip_tasks is not defined or not docker_skip_tasks

- debug: { var: wikis_to_rebuild_data }

- name: Ensure data rebuilding scripts in place on app servers
  template:
    src: "{{ item }}.j2"
    dest: "{{ m_install }}/.deploy-meza/{{ item }}"
    owner: meza-ansible
    group: wheel
    mode: 0755
  with_items:
    - elastic-rebuild-all.sh
    - run-all-jobs-now.sh
    - refresh-links.sh

- name: Ensure data rebuilding logs directories exist
  file:
    path: "{{ m_logs }}/{{ item }}"
    owner: "{{ m_logs_owner }}"
    group: "{{ m_logs_group }}"
    mode: "{{ m_logs_mode }}"
    state: directory
  with_items:
    - search-index
    - refresh-links

# FIXME: Should search and SMW building be after update.php?

# FIXME: REMOVE?
# - name: Check if localhost has /tmp/elasticsearch_do_upgrade file
#   stat:
#     path: /tmp/elasticsearch_do_upgrade
#   register: es_do_upgrade_stat
#   delegate_to: localhost

# - name: Remove /tmp/elasticsearch_do_upgrade file from localhost
#   file:
#     path: /tmp/elasticsearch_do_upgrade
#     state: absent
#   delegate_to: localhost

# - name: Set es_do_upgrade to True if localhost file exists
#   set_fact:
#     es_do_upgrade: True
#   when: es_do_upgrade_stat.stat.exists

# - name: Set es_do_upgrade to False if localhost file does not exist
#   set_fact:
#     es_do_upgrade: False
#   when: not es_do_upgrade_stat.stat.exists

- name: Verify metastore index upgraded
  shell: WIKI={{ list_of_wikis[0] }} php {{ m_mediawiki }}/extensions/CirrusSearch/maintenance/Metastore.php --upgrade
  register: metastore_upgrade_result
  run_once: true
  when: docker_skip_tasks is not defined or not docker_skip_tasks

# Run these tasks if the task above fails
# There's probably a better way to do this
- name: Remove vendor directory - Run if metastore index upgrade fails
  shell: "rm -rf {{ m_mediawiki }}/vendor"
  run_once: true
  when: metastore_upgrade_result.failed

- name: Remove composer.lock - Run if metastore index upgrade fails
  shell: "rm {{ m_mediawiki }}/composer.lock"
  run_once: true
  when: metastore_upgrade_result.failed

- name: Run composer update - Run if metastore index upgrade fails
  become: yes
  become_user: "meza-ansible"
  composer:
    command: update
    working_dir: "{{ m_mediawiki }}"
    no_dev: yes
  when: metastore_upgrade_result.failed

- name: Retry - Verify metastore index upgraded
  shell: WIKI={{ list_of_wikis[0] }} php {{ m_mediawiki }}/extensions/CirrusSearch/maintenance/Metastore.php --upgrade
  run_once: true
  when: metastore_upgrade_result.failed

# Wikis are totally built at this point, but search needs rebuilding
# FIXME #811: Will this work when controller is not an app server?
- name: "(Re-)build search index for: {{ wikis_to_rebuild_data | join(', ') }}"
  shell: 'bash {{ m_deploy }}/elastic-rebuild-all.sh "{{ wikis_to_rebuild_data | join('' '') }}"'
  when: (docker_skip_tasks is not defined or not docker_skip_tasks) and (wikis_to_rebuild_data|length > 0)
  # FIXME: REMOVE? and (not es_do_upgrade)
  run_once: true
  tags:
    - search-index

# Run update.php (MediaWiki's database update script) against all wikis. This
# only needs to be done once, since the first app server that runs it will
# update the master database.
- include_role:
    name: update.php
  vars:
    wiki_id: "{{ item }}"
  with_items: "{{ list_of_wikis }}"
  run_once: true
  tags:
    - update.php
  when: docker_skip_tasks is not defined or not docker_skip_tasks

# Required because of opcache settings. When opcache.validate_timestamps=0, for
# the sake of stability and speed, an httpd reload is required to detect changes
# to PHP files.
# Ref: https://www.scalingphpbook.com/blog/2014/02/14/best-zend-opcache-settings.html
- name: Reload (not restart) httpd to pick up changes to opcached php files
  service:
    name: "{{ service_apache }}"
    state: reloaded
  tags:
    - httpd-reload
  when: docker_skip_tasks is not defined or not docker_skip_tasks

# Might not need the above reload-apache anymore now that we're using PHP-FPM, but
# keeping it for now. Must restart php-fpm to see changes.
- name: Restart php-fpm to pick up changes to opcached php files
  service:
    name: "{{ service_php_fpm }}"
    state: restarted
  tags:
    - httpd-reload
  when: docker_skip_tasks is not defined or not docker_skip_tasks

# Extension:SyntaxHighlight requires Python 3.x present in path as `python3` for
# MediaWiki 1.31+.
- name: Ensure Python3 present on RedHat7 variant
  yum:
    name:
      - "{{ package_python3 }}"
      - "{{ package_python3_pip }}"
    state: latest
  tags:
    - latest
  when: ansible_distribution_file_variety == 'RedHat' and ansible_facts['distribution_major_version'] == "7"

# If we're using an 8 version of RedHat family we're already using python3
# but, belt and suspenders
- name: Ensure Python3 present on Rocky/RHEL8
  yum:
    name:
      - "{{ package_python3 }}"
      - "{{ package_python3_pip_rhel8 }}"
    state: latest
  tags:
    - latest
  when: ansible_distribution_file_variety == 'RedHat' and ansible_facts['distribution_major_version'] == "8"

# Not needed as alternatives takes care of this from getmeza.sh
#
#- name: "Ensure python3 symlink in place"
#  file:
#    # dest = symlink, src = dir linked to
#    src: "/usr/bin/python3.6"
#    dest: "/usr/bin/python3"
#    state: link
#    owner: root
#    group: root
#    mode: 0755
#  when: ansible_distribution_file_variety == 'RedHat'
# - name: "Ensure pip3 symlink in place"
#   file:
#     # dest = symlink, src = dir linked to
#     src: "/usr/bin/pip3.5"
#     dest: "/usr/bin/pip3"
#     state: link
#     owner: root
#     group: root
#     mode: 0755
#   when: ansible_distribution_file_variety == 'RedHat'
