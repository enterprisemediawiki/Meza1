<?php

#
# If X-SKIP-SAML header is present, disallow anonymous viewing and editing and
# skip SAML login. Allow standard MediaWiki login.
#
if ( $_SERVER['HTTP_X_SKIP_SAML'] ) {

	# Disable reading by anonymous users
	$wgGroupPermissions['*']['read'] = false;

	# But allow them to access the login page or else there will be no way to log in!
	# (You also might want to add access to "Main Page", "Help:Contents", etc.)
	// WILL API LOGIN WORK WITHOUT THIS?
	// $wgWhitelistRead = array ("Special:Userlogin");

	# Disable anonymous editing
	$wgGroupPermissions['*']['edit'] = false;

	# Prevent new user registrations except by sysops
	$wgGroupPermissions['*']['createaccount'] = false;

	# Disable API modules that could allow someone to circumvent SAML auth
	# ref: https://www.mediawiki.org/wiki/API:Restricting_API_usage
	# ref: https://www.mediawiki.org/wiki/API:Changing_wiki_content
	$wgAPIModules['createaccount'] = 'ApiDisabled';
	$wgAPIModules['options'] = 'ApiDisabled';
	$wgAPIModules['resetpassword'] = 'ApiDisabled';

	// A bit heavy handed:
	// $wgEnableWriteAPI = false;

	// consider an extension that basically just allows this hook to check who
	// a user is and check if they're in a list of allowed API users.
	// $wgHooks['UserLoggedIn'][] = 'MyExtensionHooks::onUserLoggedIn';
}

#
# Extension:SimpleSamlAuth
#
# Only do auth on requests from outside the server. Requests from inside are a
# service...probably Parsoid. Requests from outside will come from HAProxy and
# therefore will have an HTTP_X_FORWARDED_FOR variable
#
# Ref: https://www.mediawiki.org/wiki/Talk:Parsoid/Archive#Running_Parsoid_on_a_.22private.22_wiki_-_AccessDeniedError
# Ref: https://www.mediawiki.org/wiki/Extension:VisualEditor#Linking_with_Parsoid_in_private_wikis
elseif ( isset( $_SERVER['HTTP_X_FORWARDED_FOR'] ) ) {

	// wfLoadExtension( 'SimpleSamlAuth' );
	require_once "$IP/extensions/SimpleSamlAuth/SimpleSamlAuth.php";

	// the base SAML config variables exist in this file, such that it's
	// easy for the landing page to use them, too.
	require_once "{{ m_deploy }}/SAMLConfig.php";

	// Array: [MediaWiki group][SAML attribute name][SAML expected value]
	// If the SAML assertion matches, the user is added to the MediaWiki group
	$wgSamlGroupMap = array(
		//'sysop' => array(
		//	'groups' => array('admin'),
		//),
	);

	$GLOBALS['wgHooks']['SpecialPage_initList'][] = function (&$list) {
		unset( $list['Userlogout'] );
		unset( $list['Userlogin'] );
		return true;
	};

	$GLOBALS['wgHooks']['PersonalUrls'][] = function (&$personal_urls, &$wgTitle) {
		unset( $personal_urls["login"] );
		unset( $personal_urls["logout"] );
		unset( $personal_urls['anonlogin'] );
		return true;
	};

}

// don't let nobody do no account creatin'
// $wgGroupPermissions['*']['createaccount'] = false;
// $wgGroupPermissions['user']['createaccount'] = false;
// $wgGroupPermissions['sysop']['createaccount'] = false;
// $wgGroupPermissions['bureaucrat']['createaccount'] = false;
foreach( $wgGroupPermissions as $groupName => $perms ) {
	$wgGroupPermissions[ $groupName ]['createaccount'] = false;
}
