---
# Copied, with great appreciation, from geerlingguy/ansible-role-nodejs

services: docker

env:
  - distro: centos7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  # - distro: centos6
  #   init: /sbin/init
  #   run_opts: ""
  # - distro: ubuntu1604
  #   init: /lib/systemd/systemd
  #   run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  # - distro: ubuntu1404
  #   init: /sbin/init
  #   run_opts: ""
  # - distro: ubuntu1204
  #   init: /sbin/init
  #   run_opts: ""

before_install:
  # Pull container.
  - 'docker pull geerlingguy/docker-${distro}-ansible:latest'

script:

  #
  # SETUP CONTAINER
  #

  - container_id=$(mktemp)

  # Run container in detached state.
  - 'docker run --detach --volume="${PWD}":/opt/meza --add-host="localhost:127.0.0.1" ${run_opts} geerlingguy/docker-${distro}-ansible:latest "${init}" > "${container_id}"'

  # Wrap all the `docker exec ...` in an array for clarity
  - 'docker_exec_lite=( docker exec "$(cat ${container_id})" )'
  - 'docker_exec=( docker exec --tty "$(cat ${container_id})" env TERM=xterm )'

  # Capture args for cURLing for status codes
  - 'curl_args=( curl --write-out %{http_code} --silent --output /dev/null )'

  #
  # TEST ANSIBLE SYNTAX
  #

  - '${docker_exec[@]} ansible-playbook /opt/meza/ansible/site.yml --syntax-check'


  #
  # INSTALL MONOLITH
  #

  # Install meza command
  - '${docker_exec[@]} bash /opt/meza/scripts/getmeza.sh'
  - 'docker_ip=$(docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" "$(cat ${container_id})")'

  # Since we want to make the monolith environment without prompts, need to do
  # `meza setup env monolith` with values for required args included (fqdn,
  # db_pass, email, private_net_zone).
  - '${docker_exec[@]} fqdn=${docker_ip} db_pass=1234 email=false private_net_zone=public meza setup env monolith'

  # Now that environment monolith is setup, deploy/install it
  - '${docker_exec[@]} meza install monolith'


  #
  # TEST BASIC SYSTEM FUNCTIONALITY
  #

  # Ensure Node.js and PHP installed.
  - '${docker_exec[@]} which node'
  - '${docker_exec[@]} node -v'
  - '${docker_exec[@]} which php'
  - '${docker_exec[@]} php --version'
  - '${docker_exec[@]} which mysql'
  - '${docker_exec[@]} mysql --version'


  #
  # RUN TESTS AGAINST WEBSERVER AND "Demo Wiki"
  #

  # HAProxy 302 redirect test
  - '${docker_exec[@]} ${curl_args[@]} http://127.0.0.1'
  - >
    ${docker_exec[@]} ${curl_args[@]} http://127.0.0.1
    | grep -q '302'
    && (echo 'HAProxy 302 redirect test: pass' && exit 0)
    || (echo 'HAProxy 302 redirect test: fail' && exit 1)

  # Apache (over port 8080) 200 OK test
  - '${docker_exec[@]} ${curl_args[@]} http://127.0.0.1:8080'
  - >
    ${docker_exec[@]} ${curl_args[@]} http://127.0.0.1:8080
    | grep -q '200'
    && (echo 'Apache 200 test: pass' && exit 0)
    || (echo 'Apache 200 test: fail' && exit 1)

  # Demo Wiki API test
  - '${docker_exec[@]} curl -L "http://127.0.0.1:8080/demo/api.php?action=query&meta=siteinfo&format=json"'
  - >
    ${docker_exec[@]} curl -L "http://127.0.0.1:8080/demo/api.php?action=query&meta=siteinfo&format=json"
    | grep -q '"sitename":"Demo Wiki",'
    && (echo 'Demo Wiki API test: pass' && exit 0)
    || (echo 'Demo Wiki API test: fail' && exit 1)


  #
  # TEST FOR IDEMPOTENCE. THIS WILL FAIL CURRENTLY.
  #

  # - idempotence=$(mktemp)
  # - docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml | tee -a ${idempotence}
  # - >
  #   tail ${idempotence}
  #   | grep -q 'changed=0.*failed=0'
  #   && (echo 'Idempotence test: pass' && exit 0)
  #   || (echo 'Idempotence test: fail' && exit 1)


  #
  # REDEPLOY MONOLITH FROM REPO (MULTIPLE WIKIS)
  #

  # Remove demo wiki configuration
  - '${docker_exec_lite[@]} rm -rf /opt/meza/config/local_control'
  - '${docker_exec_lite[@]} rm -rf /opt/meza/config/local_app'
  - '${docker_exec_lite[@]} rm -rf /opt/meza/htdocs/wikis/demo'

  # Get test config
  - '${docker_exec[@]} git clone https://github.com/enterprisemediawiki/meza-test-config.git /opt/meza/config/local_control'

  # Docker container restart required for some reason prior to re-running
  # deploy. This is not required on standard VMs, just in Docker.
  - 'docker restart "$(cat ${container_id})"'

  # Redeploy with new config
  - '${docker_exec[@]} meza install monolith'


  #
  # RUN TESTS AGAINST WEBSERVER AND "Top Wiki"
  #

  # HAProxy 302 redirect test
  - '${docker_exec[@]} ${curl_args[@]} http://127.0.0.1'
  - >
    ${docker_exec[@]} ${curl_args[@]} http://127.0.0.1
    | grep -q '302'
    && (echo 'HAProxy 302 redirect test: pass' && exit 0)
    || (echo 'HAProxy 302 redirect test: fail' && exit 1)

  # Apache (over port 8080) 200 OK test
  - '${docker_exec[@]} ${curl_args[@]} http://127.0.0.1:8080'
  - >
    ${docker_exec[@]} ${curl_args[@]} http://127.0.0.1:8080
    | grep -q '200'
    && (echo 'Apache 200 test: pass' && exit 0)
    || (echo 'Apache 200 test: fail' && exit 1)

  # Top Wiki API test
  - >
    ${docker_exec[@]} curl -L "http://127.0.0.1:8080/top/api.php?action=query&meta=siteinfo&format=json"
    | grep -q '"sitename":"Top Wiki",'
    && (echo 'Top Wiki API test: pass' && exit 0)
    || (echo 'Top Wiki API test: fail' && exit 1)


  #
  # CREATE WIKI AND TEST
  #
  - '${docker_exec[@]} meza create wiki-promptless monolith created "Created Wiki"'

  # Created Wiki API test
  - >
    ${docker_exec[@]} curl -L "http://127.0.0.1:8080/created/api.php?action=query&meta=siteinfo&format=json"
    | grep -q '"sitename":"Created Wiki",'
    && (echo 'Created Wiki API test: pass' && exit 0)
    || (echo 'Created Wiki API test: fail' && exit 1)


notifications:
  slack:
    secure: WGio0Sf5R+nm7kNLSxG5DZoFZjh1ifNbuH0TR5XlbtQ6r9hVHYDW8jRT2PoG9mHFNUDzHE4ixJfpbhHKdnqHwjJrtKhUWemBE95dqrDhQI1iWQZm2JHnK0KsjyOtc6DVqa3zA6Mrv1w1UONHwoe3QfSj5cj/qVBQaWBB8EhxNubmcKK2Zz+keMNkMfWDaPmGj+pQG5daGGRlkvoZOm7TkAIk4JXpvOwnAPKZx+MbX3tYNFqPgPJpbxejM8t5EqHAQEPJA8dThgG76kO5jFTMhkQdCWusK+7pl/IN0MlJf9S+rVv0HuacPDQmnaEw23O+otA8T9amNlOvc2bUR8djiStDLfZYlYtTdEpUOfPAR2CxplJM1YV1o982Vt8wOyqO0BWjaID8BEjHE0tn8vKF+qQ1WpNB6nZZNNqLdfUSaMS2y6t15sLV3NZWYe3Bw0ebsR5dsfOHX5U4RwSjbsL99Rm9B4eDL9gAUWn4L4USYjLb5Os6DePXxrCRvPL13OjxJGvWb8NIUJbtQASDc69Qc2M4M9ZB4MkjBDsoEfLYhmB9KeERycRB2pnAGVxUWJn/Cbj4yAvaU60sZPNBLr4Q+HGz1zciZ4yV8tCrLkN99pxxAWxil/PsNVWPtRueznNRPfbPiARbVeLO/r3OcQocfEKpRrNh8sb3kJ8MzHXa9RU=
  on_success: always
  on_failure: always
  on_pull_requests: true
