---
# Copied, with great appreciation, from geerlingguy/ansible-role-nodejs

services: docker

env:
  - docker_repo: jamesmontalvo3/meza-docker-base:latest
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    test_type: monolith_from_scratch
  - docker_repo: jamesmontalvo3/meza-docker-base:latest
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    test_type: monolith_from_import
  # - distro: centos6
  #   init: /sbin/init
  #   run_opts: ""
  # - distro: ubuntu1604
  #   init: /lib/systemd/systemd
  #   run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  # - distro: ubuntu1404
  #   init: /sbin/init
  #   run_opts: ""
  # - distro: ubuntu1204
  #   init: /sbin/init
  #   run_opts: ""

before_install:
  # Pull container.
  - 'docker pull ${docker_repo}'

script:

  # Report docker and server versions
  - 'docker -v'

  #
  # SETUP CONTAINER
  #

  - container_id=$(mktemp)

  # Run container in detached state.
  - 'docker run --detach --volume="${PWD}":/opt/meza --add-host="localhost:127.0.0.1" ${run_opts} ${docker_repo} "${init}" > "${container_id}"'

  # Wrap all the `docker exec ...` in an array for clarity
  - 'docker_exec_lite=( docker exec "$(cat ${container_id})" )'
  - 'docker_exec=( docker exec --tty "$(cat ${container_id})" env TERM=xterm )'

  # Capture args for cURLing for status codes
  - 'curl_args=( curl --write-out %{http_code} --silent --output /dev/null )'

  # Make sure firewalld installed and docker0 interface is in zone public
  # Discovered thanks to https://github.com/docker/docker/issues/16137
  - '${docker_exec[@]} yum -y install firewalld'
  - '${docker_exec[@]} systemctl start firewalld'
  - '${docker_exec[@]} firewall-cmd --permanent --zone=public --change-interface=docker0'


  #
  # INSTALL MONOLITH
  #

  # Install meza command
  - '${docker_exec[@]} bash /opt/meza/scripts/getmeza.sh'
  - 'docker_ip=$(docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" "$(cat ${container_id})")'


  #
  # TEST ANSIBLE SYNTAX
  #
  - '${docker_exec[@]} ansible-playbook /opt/meza/ansible/site.yml --syntax-check'


  #
  # IF monolith_from_scratch
  #

  # Since we want to make the monolith environment without prompts, need to do
  # `meza setup env monolith` with values for required args included (fqdn,
  # db_pass, email, private_net_zone).
  - 'if [ "$test_type" == "monolith_from_scratch" ]; then ${docker_exec[@]} fqdn=${docker_ip} db_pass=1234 email=false private_net_zone=public meza setup env monolith; fi'


  #
  # ELSE if monolith_from_import
  #

  # Get test "secret" config
  - 'if [ "$test_type" == "monolith_from_import" ]; then ${docker_exec[@]} git clone https://github.com/enterprisemediawiki/meza-test-config-secret.git /opt/meza/ansible/env/monolith; fi'

  # Write the docker containers IP as the FQDN for the test config (the only
  # config setting we can't know ahead of time)
  - 'if [ "$test_type" == "monolith_from_import" ]; then sed -r -i "s/INSERT_FQDN/$docker_ip/g;" "/opt/meza/ansible/env/monolith/group_vars/all.yml"; fi'

  # Get test non-secret config
  - 'if [ "$test_type" == "monolith_from_import" ]; then ${docker_exec[@]} git clone https://github.com/enterprisemediawiki/meza-test-config.git /opt/meza/config/local_control; fi'

  # FIXME: get backup files for test

  #
  # END IF
  #

  # Now that environment monolith is setup, deploy/install it
  - '${docker_exec[@]} meza install monolith'


  #
  # TEST BASIC SYSTEM FUNCTIONALITY
  #

  # Ensure Node.js, PHP, MariaDB installed.
  - '${docker_exec[@]} which node'
  - '${docker_exec[@]} node -v'
  - '${docker_exec[@]} which php'
  - '${docker_exec[@]} php --version'
  - '${docker_exec[@]} which mysql'
  - '${docker_exec[@]} mysql --version'

  # HAProxy 302 redirect test
  - '${docker_exec[@]} ${curl_args[@]} http://127.0.0.1'
  - >
    ${docker_exec[@]} ${curl_args[@]} http://127.0.0.1
    | grep -q '302'
    && (echo 'HAProxy 302 redirect test: pass' && exit 0)
    || (echo 'HAProxy 302 redirect test: fail' && exit 1)

  # Apache (over port 8080) 200 OK test
  - '${docker_exec[@]} ${curl_args[@]} http://127.0.0.1:8080'
  - >
    ${docker_exec[@]} ${curl_args[@]} http://127.0.0.1:8080
    | grep -q '200'
    && (echo 'Apache 200 test: pass' && exit 0)
    || (echo 'Apache 200 test: fail' && exit 1)




  # Demo Wiki API test
  - 'if [ "$test_type" == "monolith_from_scratch" ]; then bash ./test/travis/wiki-check.sh demo "Demo Wiki" "$(cat ${container_id})"; fi'

  # FIXME: TEST FOR IDEMPOTENCE. THIS WILL FAIL CURRENTLY.

  # Top Wiki API test
  - 'if [ "$test_type" == "monolith_from_import" ]; then bash ./test/travis/wiki-check.sh top "Top Wiki" "$(cat ${container_id})"; fi'

  # CREATE WIKI AND TEST
  - 'if [ "$test_type" == "monolith_from_scratch" ]; then ${docker_exec[@]} meza create wiki-promptless monolith created "Created Wiki"; fi'
  - 'if [ "$test_type" == "monolith_from_scratch" ]; then bash ./test/travis/wiki-check.sh created "Created Wiki" "$(cat ${container_id})"; fi'

notifications:
  slack:
    secure: WGio0Sf5R+nm7kNLSxG5DZoFZjh1ifNbuH0TR5XlbtQ6r9hVHYDW8jRT2PoG9mHFNUDzHE4ixJfpbhHKdnqHwjJrtKhUWemBE95dqrDhQI1iWQZm2JHnK0KsjyOtc6DVqa3zA6Mrv1w1UONHwoe3QfSj5cj/qVBQaWBB8EhxNubmcKK2Zz+keMNkMfWDaPmGj+pQG5daGGRlkvoZOm7TkAIk4JXpvOwnAPKZx+MbX3tYNFqPgPJpbxejM8t5EqHAQEPJA8dThgG76kO5jFTMhkQdCWusK+7pl/IN0MlJf9S+rVv0HuacPDQmnaEw23O+otA8T9amNlOvc2bUR8djiStDLfZYlYtTdEpUOfPAR2CxplJM1YV1o982Vt8wOyqO0BWjaID8BEjHE0tn8vKF+qQ1WpNB6nZZNNqLdfUSaMS2y6t15sLV3NZWYe3Bw0ebsR5dsfOHX5U4RwSjbsL99Rm9B4eDL9gAUWn4L4USYjLb5Os6DePXxrCRvPL13OjxJGvWb8NIUJbtQASDc69Qc2M4M9ZB4MkjBDsoEfLYhmB9KeERycRB2pnAGVxUWJn/Cbj4yAvaU60sZPNBLr4Q+HGz1zciZ4yV8tCrLkN99pxxAWxil/PsNVWPtRueznNRPfbPiARbVeLO/r3OcQocfEKpRrNh8sb3kJ8MzHXa9RU=
  on_success: always
  on_failure: always
  on_pull_requests: true
