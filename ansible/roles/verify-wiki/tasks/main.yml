---
#
# Things that need to be done just once:
#   1. Create database if not exists
#      - If present, do nothing
#      - If possible, use SQL files from controller:/opt/backups/WIKI-ID
#      - else: just use MediaWiki tables.sql
#
# Things that need to be done on all app servers:
#   2. Make sure htdocs/wikis/WIKI-ID/config symlinks to local/wikis/WIKI-ID
#   3. Make sure htdocs/wikis/WIKI-ID/images exists
#      - if possible: get from controller:/opt/backups/WIKI-ID/images
#      - else: just create dir
#      - eventually need method to force-rsync from backup


# Check if databases starting with "wiki_" exist
#   if database exists: wiki_database.rc == 0
#   if no database:  wiki_database.rc == 1
- name: check if wiki database exists
  shell: 'mysqlshow "wiki_{{ wiki_id }}" | grep -v Wildcard | grep -o wiki_{{ wiki_id }}'
  register: wiki_exists
  delegate_to: "{{ groups['db-master'][0] }}"
  ignore_errors: yes
  run_once: true

- debug: { msg: "Database wiki_{{ wiki_id }} DOES exist" }
  when: wiki_exists is defined and wiki_exists.rc == 0

- debug: { msg: "Database wiki_{{ wiki_id }} DOES NOT exist" }
  when: wiki_exists is defined and wiki_exists.rc == 1

#
# If wiki database does not exist
#

- name: Check if backups dir exists
  stat:
    path: "{{ m_backups }}/{{ env }}/{{ wiki_id }}"
  register: backups_dir
  when: wiki_exists is defined and wiki_exists.rc == 1
  delegate_to: "{{ groups['backup-servers'][0] }}"


# This will find the latest sql file by name, or wiki.sql over any timestamped one
# assuming timestamp-named files like 20170220000002_wiki.sql
- name: Find SQL file if it exists
  shell: 'find {{ m_backups }}/{{ env }}/{{ wiki_id }} -maxdepth 1 -type f -iname "*.sql" | sort -r | head -n +1'
  register: wiki_sql_file
  delegate_to: "{{ groups['backup-servers'][0] }}"
  run_once: true
  when:
    wiki_exists is defined
    and wiki_exists.rc == 1
    and backups_dir.stat.exists == true


  #
  # Since backup-servers[0], master-db[0] and controller (localhost) are three
  # different servers, and the current Ansible play is being run against app-
  # servers, there's no way to send from backup-servers[0] to master-db[0]
  # directly. Instead, pass to controller, then form controller to master-db
  #
- name: if wiki_sql_file defined, FIRST remove preexisting SQL file from controller
  file:
    path: /tmp/controller-wiki.sql
    state: absent
  run_once: true
  delegate_to: localhost
  when:
    wiki_sql_file is defined
    and wiki_sql_file.rc == 0
- name: if wiki_sql_file defined, NEXT send SQL file to controller
  fetch:
    src: "{{ wiki_sql_file.stdout }}"
    dest: /tmp/controller-wiki.sql
    fail_on_missing: yes
    flat: yes
  # note: don't run fetch with become on large files. ref bottom of this page:
  # http://docs.ansible.com/ansible/fetch_module.html
  become: no
  run_once: true
  delegate_to: "{{ groups['backup-servers'][0] }}"
  when:
    wiki_sql_file is defined
    and wiki_sql_file.rc == 0
- name: if wiki_sql_file defined, NEXT send file from controller to master-db
  copy:
    src: /tmp/controller-wiki.sql
    dest: /tmp/wiki.sql
    force: yes
  run_once: true
  delegate_to: "{{ groups['db-master'][0] }}"
  when:
    wiki_sql_file is defined
    and wiki_sql_file.rc == 0



- name: If wiki_sql_file NOT defined, send generic file to master db
  copy:
    src: templates/mediawiki-tables.sql
    dest: /tmp/wiki.sql
    force: yes
  run_once: true
  delegate_to: "{{ groups['db-master'][0] }}"
  when:
    wiki_sql_file is not defined
    or wiki_sql_file.rc != 0

- name: Import SQL file
  mysql_db:
    name: "wiki_{{ wiki_id }}"
    state: import
    target: /tmp/wiki.sql
  run_once: true
  delegate_to: "{{ groups['db-master'][0] }}"
  when: wiki_exists is defined and wiki_exists.rc == 1

- name: Remove SQL file from master DB
  file:
    path: /tmp/wiki.sql
    state: absent
  run_once: true
  delegate_to: "{{ groups['db-master'][0] }}"
  when: wiki_exists is defined and wiki_exists.rc == 1


#
# Make sure wiki's htdocs directory in place, and symlink to config. Symlink
# required so logo and favicon accessible via HTTP. Consider creating other
# method to allow HTTP access to these files (HAProxy rule? httpd rule? PHP?)
#
- name: Ensure wiki htdocs directory in place
  file:
    path: "{{ m_htdocs }}/wikis/{{ wiki_id }}"
    state: directory
    owner: apache
    group: apache
    mode: 0755
- name: Ensure wiki config symlink in place
  file:
    # dest = symlink, src = dir linked to
    src: "{{ m_local_app }}/wikis/{{ wiki_id }}"
    dest: "{{ m_htdocs }}/wikis/{{ wiki_id }}/config"
    state: link
    owner: apache
    group: apache
    mode: 0755



#
# Make sure wiki's uploads directory is properly setup
#
- name: Check if wiki's uploads dir exists ON APP SERVER
  stat:
    path: "{{ m_uploads_dir }}/{{ wiki_id }}"
  register: uploads_dir

- name: Check if wiki's uploads backup dir exists ON CONTROLLER
  stat:
    path: "{{ m_backups }}/{{ env }}/{{ wiki_id }}/uploads"
  register: images_backup_dir
  delegate_to: localhost


- name: If no uploads dir, but there is a backup dir
  copy:
    src: "{{ m_backups }}/{{ env }}/{{ wiki_id }}/uploads/"
    dest: "{{ m_uploads_dir }}/{{ wiki_id }}"
    mode: 0755
    owner: apache
    group: apache
  when:
    not uploads_dir.stat.exists
    and images_backup_dir.stat.exists

# Either way (existing backup or no) make sure uploads dir is configured
- name: Ensure wiki's uploads dir is configured
  file:
    path: "{{ m_uploads_dir }}/{{ wiki_id }}"
    state: directory
    mode: 0755
    owner: apache
    group: apache


- name: Include init-wiki.yml only when a new wiki was created
  include: init-wiki.yml
  when: wiki_exists is defined and wiki_exists.rc == 1
