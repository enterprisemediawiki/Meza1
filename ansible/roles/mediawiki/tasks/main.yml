---


- name: Ensure proper MediaWiki git version installed
  git:
    repo: https://gerrit.wikimedia.org/r/p/mediawiki/core.git
    dest: "{{ m_mediawiki }}"
    version: "1.27.1"

# The following was required for MediaWiki 1.25.5, and appears fixed in 1.25.6+
#
# Before composer-merge-plugin v1.2.0, MW incorrectly required
# v1.0.0 of the Composer internal composer-plugin-api component.
# Composer recently bumped this internal version to v1.1.0 [0].
# A patch to MW is in work, but this is required to keep meza
# building properly.
#
# [0]: https://github.com/composer/composer/commit/aeafe2fe59992efd1bc3f890b760f1a9c4874e1c
#
# Replace v1.0.0 with v1.3.1 of wikimedia/composer-merge-plugin in composer.json
# sed -r -i 's/"wikimedia\/composer-merge-plugin": "1.0.0",/"wikimedia\/composer-merge-plugin": "1.3.1",/;' "$m_mediawiki/composer.json"



- name: Ensure Vector skin installed
  git:
    repo: https://gerrit.wikimedia.org/r/p/mediawiki/skins/Vector.git
    dest: "{{ m_mediawiki }}/skins/Vector"
    version: "REL1_27"

- name: Put composer.local.json in place to load composer-supported extensions
  template:
    src: composer.local.json.j2
    dest: "{{ m_mediawiki }}/composer.local.json"

- name: Run composer install on MediaWiki for dependencies
  composer:
    command: install
    working_dir: "{{ m_mediawiki }}"
  # FIXME: need ignore_errors because composer throws an error when running as root.
  ignore_errors: yes

- name: Run composer update on MediaWiki for extensions
  composer:
    command: update
    working_dir: "{{ m_mediawiki }}"
  # FIXME: need ignore_errors because composer throws an error when running as root.
  ignore_errors: yes

- name: Ensure WikiBlender installed
  git:
    repo: https://github.com/jamesmontalvo3/WikiBlender.git
    dest: "{{ m_htdocs }}/WikiBlender"
    version: "master"


- name: Ensure base meza extensions installed
  include: load-extensions-from-file.yml
  vars:
    extfile: "{{ m_meza }}/ansible/roles/mediawiki/files/base-extensions.yml"

- name: VisualEditor git submodule update --init
  shell: |
    cd "{{ m_mediawiki }}/extensions/VisualEditor"
    git submodule update --init

- name: Composer install Elastica dependencies
  composer:
    command: install
    working_dir: "{{ m_mediawiki }}/extensions/Elastica"
  # FIXME: need ignore_errors because composer throws an error when running as root.
  ignore_errors: yes

- name: Composer install SyntaxHighlight_GeSHi dependencies
  composer:
    command: install
    working_dir: "{{ m_mediawiki }}/extensions/SyntaxHighlight_GeSHi"
  # FIXME: need ignore_errors because composer throws an error when running as root.
  ignore_errors: yes



- name: Ensure LocalSettings.php in place
  template:
    src: LocalSettings.php.j2
    dest: "{{ m_mediawiki }}/LocalSettings.php"
    backup: yes

- name: Ensure BlenderSettings.php in place
  template:
    src: BlenderSettings.php.j2
    dest: "{{ m_htdocs }}/WikiBlender/BlenderSettings.php"



#
# This is sort of odd, but we need localhost, e.g. the controlling machine, to
# have local config information. local-config.yml will get meza-installation-
# specific repositories to configure the installation. That data needs to be
# on the controller as well as the app servers. It may even be required on
# other servers at some point, if meza-installations need to do reconfigs... (i
# think i trailed off here)
#
- include: local-config.yml
  delegate_to: localhost

# Now include it for the app-servers
- include: local-config.yml




#
# Get meza-installation-specific extensions, both for all-wikis and for
# specific wikis
#
- name: install installation-specific extensions
  include: load-extensions-from-file.yml
  vars:
    extfile: "{{ m_local }}/all-wiki-more-extensions.yml"

- name: Get individual wikis dirs
  find:
    paths: "{{ m_local }}/wikis/"
    file_type: directory
  register: wikis_dirs

- name: loop over wikis, install wiki-specific extensions
  include: load-extensions-from-file.yml
  vars:
    extfile: "{{ item.path }}/this-wiki-more-extensions.yml"
  with_items: "{{ wikis_dirs.files }}"







# Check if databases starting with "wiki_" exist
#   if any wiki_* databases: wiki_databases.rc == 0
#   if no wiki_* databases:  wiki_databases.rc == 1
- name: check if wiki databases exist
  shell: mysql -e 'SHOW DATABASES;' | grep "wiki_"
  register: wiki_databases
  ignore_errors: yes
  delegate_to: "{{ groups['db-master'][0] }}"
  when: inventory_hostname == groups['app-servers'][0]

# Create Demo Wiki if there are no other wikis
- include: create-wiki.yml
  vars:
    wiki_id: demo
    wiki_site_name: Demo Wiki
  when:
    - inventory_hostname == groups['app-servers'][0]
    - wiki_databases.rc == 1

# If there were other wikis, update the databases of all of them
# FIXME: This would be better if it only ran when MediaWiki core or extensions
#        were update such that database update may be required. But that may be
#        hard to determine when it's required, and it may be better to just do
#        it all the time (as done below). update.php won't hurt anything (but
#        just in case we take a backup beforehand)
- include: update-db-all-wikis.yml
  when:
    - inventory_hostname == groups['app-servers'][0]
    - wiki_databases.rc == 0
