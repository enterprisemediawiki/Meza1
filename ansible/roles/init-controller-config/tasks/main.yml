---

# function syncConfigs () {

#   if controller.local_config:
#     cp controller.local_config app.each.local_config
#   elif app[1].local_config:
#     # NOTE: if a .git repo, get it so controller has repo
#     cp app[1].local_config controller.local_config
#     cp app[1].local_config app.each.local_config
#   elif local_config.repo:
#     clone repo > controller.local_config
#     clone repo > app.each.local_config
#   else:
#     cp baseline controller
#     cp baseline app.each

# }

# [1] This should only be run the first time (on the first app server) since on
# subsequent passes the controller is gauranteed to have a local config.
- name: Does controller have local config
  stat:
    path: "{{ m_local_control }}"
  register: controller_local_config
  delegate_to: localhost
  run_once: true

# Run once for reason [1] above
- name: Does first app-server have local config
  stat:
    path: "{{ m_local_app }}"
  register: app1_local_config
  run_once: true

# No controller_local_config, but YES to app1_local_config?
# Copy from app1 to controller
# Run once for reason [1] above
#
# I've run into issues with synchronize in situations where localhost may be
# copying to/from an inventory host _that may also be localhost_. In other
# words, mixing localhost into the application, and making the controller a
# member of the inventory, has caused issues. However, I don't think that can
# happen here since the "when" condition is when localhost doesn't have the
# directory and app1 does, meaning they're different servers.
- name: "Ensure controller has config from app server 1"
  synchronize:
    mode: pull
    src: "{{ m_local_app }}"
    dest: "{{ m_local_control }}"
    owner: root
    group: root
    mode: 0755
  run_once: true
  when:
    not controller_local_config.stat.exists
    and app1_local_config.stat.isdir is defined
    and app1_local_config.stat.isdir

# If controller still doesn't have a local config, but a git repo is defined,
# use that. Need to check if both controller_local_config and app1_local_config
# DIDN'T exist, since that would mean that the controller still doesn't have a
# config directory
- name: Get local config repo if set
  git:
    repo: "{{ local_config_repo.repo }}"
    dest: "{{ m_local_control }}"
    version: "{{ local_config_repo.version | default('master') }}"
    force: "{{ local_config_repo.force | default(false) | bool }}"
  delegate_to: localhost
  run_once: true
  when:
    not controller_local_config.stat.exists
    and not app1_local_config.stat.exists
    and local_config_repo.repo is defined

# After all that, now check if controller has a local config
# (not sure if I should reuse controller_local_config here)
- name: Does controller have local config
  stat:
    path: "{{ m_local_control }}"
  register: recheck_controller
  delegate_to: localhost
  run_once: true

# At this point, whether a m_local directory exists on the controller or not,
# ensure the directory exists and is configured properly
- name: Ensure m_local_control configured on controller
  file:
    path: "{{ m_local_control }}"
    state: directory
    owner: root
    group: root
    mode: 0755
    recurse: true
  delegate_to: localhost
  run_once: true


# Still no config for controller? This must be a new installation. Copy from
# the baseline.
- name: "Ensure m_local_control/wikis exists"
  file:
    path: "{{ m_local_control }}/wikis"
    state: directory
    owner: root
    group: root
    mode: 0755
  delegate_to: localhost
  run_once: true

- name: "Ensure base files present, do NOT overwrite"
  copy:
    src: "templates/{{ item }}"
    dest: "{{ m_local_control }}/{{ item }}"
    owner: root
    group: root
    mode: 0755
    force: no
  delegate_to: localhost
  run_once: true
  with_items:
    - all-wiki-more-extensions.yml
    - preLocalSettings_allWikis.php
    - postLocalSettings_allWikis.php
    - deploy-config.yml
